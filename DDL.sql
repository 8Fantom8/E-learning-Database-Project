DROP TYPE IF EXISTS UserRole CASCADE;
CREATE TYPE UserRole AS ENUM ('instructor', 'student', 'administrator');

DROP TYPE IF EXISTS AcademicSemester CASCADE;
CREATE TYPE AcademicSemester AS ENUM ('Fall', 'Winter', 'Spring', 'Summer');

DROP TYPE IF EXISTS InstructorRole CASCADE;
CREATE TYPE InstructorRole AS ENUM ('Instructor', 'Teaching Assistant');

DROP TABLE IF EXISTS "User" CASCADE;

CREATE TABLE "User" (
	"ID" SERIAL PRIMARY KEY,
	FirstName VARCHAR(50) NOT NULL,
	MiddleName VARCHAR(50) NULL,
	LastName VARCHAR(50) NOT NULL,
	DOB DATE NOT NULL,
	"Role" UserRole NOT NULL,
	Username VARCHAR(25) UNIQUE NOT NULL,
	PasswordHash CHAR(128) NOT NULL,
	RegDate DATE NOT NULL,
	LastAccess TIMESTAMP NOT NULL,
	Active BOOL NOT NULL DEFAULT TRUE
);

DROP TABLE IF EXISTS Course CASCADE;

CREATE TABLE Course (
	"ID" SERIAL PRIMARY KEY,
	Code VARCHAR(10) NOT NULL,
	"Section" VARCHAR(3) NOT NULL,
	Semester AcademicSemester NOT NULL,
	"Year" INTEGER NOT NULL,
	IsGraded BOOLEAN NOT NULL
);

DROP TABLE IF EXISTS TimeSlot CASCADE;

CREATE TABLE TimeSlot (
	"ID" SERIAL PRIMARY KEY,
	WeekdayNumber INTEGER NOT NULL,
	StartTime TIME NOT NULL,
	EndTime TIME NOT NULL,
	CHECK (EndTime > StartTime)
);

DROP TABLE IF EXISTS CourseSchedule CASCADE;

CREATE TABLE CourseSchedule (
	"ID" SERIAL PRIMARY KEY,
	CourseID INTEGER NOT NULL REFERENCES Course ("ID"),
	TimeSlotID INTEGER NOT NULL REFERENCES TimeSlot ("ID")
);

DROP TABLE IF EXISTS Enrollment CASCADE;

CREATE TABLE Enrollment (
	"ID" SERIAL PRIMARY KEY,
	UserID INTEGER NOT NULL REFERENCES "User" ("ID"),
	CourseID INTEGER NOT NULL REFERENCES Course ("ID"),
	EnrolledAt TIMESTAMP NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc')
);

DROP TABLE IF EXISTS CourseInstructors CASCADE;

CREATE TABLE CourseInstructors (
	"ID" SERIAL PRIMARY KEY,
	UserID INTEGER NOT NULL REFERENCES "User" ("ID"),
	CourseID INTEGER NOT NULL REFERENCES Course ("ID"),
	"InstructorRole" InstructorRole NOT NULL
);

DROP TABLE IF EXISTS PageSection CASCADE;

CREATE TABLE PageSection (
	"ID" SERIAL PRIMARY KEY,
	CourseID INTEGER NOT NULL REFERENCES Course ("ID"),
	Title VARCHAR(100) NOT NULL,
	Description TEXT NULL,
	OrderNumber INTEGER NOT NULL
);

DROP TABLE IF EXISTS SectionItem CASCADE;

CREATE TABLE SectionItem (
    "ID" SERIAL PRIMARY KEY,
    PageSectionID INTEGER NOT NULL REFERENCES PageSection ("ID"),
    Title VARCHAR(100) NOT NULL,
	OrderNumber INTEGER NOT NULL
);

DROP TABLE IF EXISTS AssignmentGroup CASCADE;

CREATE TABLE AssignmentGroup (
	"ID" SERIAL PRIMARY KEY,
	CourseID INTEGER NOT NULL REFERENCES Course ("ID"),
	Title VARCHAR(100) NOT NULL,
	DropLowestN INTEGER NOT NULL DEFAULT 0,
	PercentOfGrade FLOAT NOT NULL
);

DROP TABLE IF EXISTS "File" CASCADE;

CREATE TABLE "File" (
	"ID" SERIAL PRIMARY KEY,
	Filepath VARCHAR(512) NOT NULL,
	DateAdded TIMESTAMP NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc')
);

DROP TABLE IF EXISTS "Assignment" CASCADE;

CREATE TABLE "Assignment" (
	"ID" INT PRIMARY KEY,
	AssignmentGroupID INTEGER NOT NULL REFERENCES AssignmentGroup ("ID"),
    CreatedAt TIMESTAMP NOT NULL,
    OpenedAt TIMESTAMP NOT NULL,
    DueAt TIMESTAMP NOT NULL,
    LateSubmissionAllowed BOOLEAN NOT NULL,
	Body TEXT NULL,
	FOREIGN KEY ("ID") REFERENCES SectionItem("ID")
) INHERITS (SectionItem);

DROP TABLE IF EXISTS AssignmentFile CASCADE;

CREATE TABLE AssignmentFile (
	"ID" SERIAL PRIMARY KEY,
	AssignmentID INTEGER NOT NULL REFERENCES "Assignment" ("ID"),
    FileID INTEGER NOT NULL REFERENCES "File" ("ID")
);

DROP TABLE IF EXISTS Submission CASCADE;

CREATE TABLE Submission (
	"ID" SERIAL PRIMARY KEY,
	StudentID INTEGER NOT NULL REFERENCES "User" ("ID"),
	AssignmentID INTEGER NOT NULL REFERENCES "Assignment" ("ID"),
	SubmittedAt TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS AssignmentQuiz CASCADE;

CREATE TABLE AssignmentQuiz (
	"ID" INT PRIMARY KEY,
	NumberOfQuestions INTEGER NOT NULL,
	ShuffleAnswers BOOL NOT NULL DEFAULT FALSE,
	ShuffleQuestions BOOL NOT NULL DEFAULT FALSE,
	TimeLimit INTERVAL NOT NULL,
	FOREIGN KEY ("ID") REFERENCES "Assignment"("ID")
) INHERITS ("Assignment");

DROP TABLE IF EXISTS QuizQuestion CASCADE;

CREATE TABLE QuizQuestion (
	"ID" SERIAL PRIMARY KEY,
	QuizID INTEGER NOT NULL REFERENCES AssignmentQuiz ("ID"),
	Question TEXT NOT NULL,
	FileID INTEGER NULL REFERENCES "File" ("ID"),
	OrderNumber INTEGER NOT NULL
);

DROP TABLE IF EXISTS QuizAnswer CASCADE;

CREATE TABLE QuizAnswer (
	"ID" SERIAL PRIMARY KEY,
	QuizID INTEGER NOT NULL REFERENCES AssignmentQuiz ("ID"),
	QuestionID INTEGER NOT NULL REFERENCES QuizQuestion ("ID"),
	Answer TEXT NOT NULL,
	FileID INTEGER NULL REFERENCES "File" ("ID"),
	OrderNumber INTEGER NOT NULL,
	IsCorrect BOOL NOT NULL DEFAULT FALSE
);

DROP TABLE IF EXISTS QuizSubmission CASCADE;

CREATE TABLE QuizSubmission (
	"ID" INT PRIMARY KEY, 
	QuestionID INTEGER NOT NULL REFERENCES QuizQuestion ("ID"),
	AnswerID INTEGER NULL REFERENCES QuizAnswer ("ID"),
	ClickedAt TIMESTAMP NOT NULL,
	FOREIGN KEY("ID") REFERENCES Submission("ID")
) INHERITS (Submission);

DROP TABLE IF EXISTS AssignmentFileUpload CASCADE;

CREATE TABLE AssignmentFileUpload (
	"ID" INT PRIMARY KEY,
	MaxFilesAllowed INTEGER NOT NULL DEFAULT 1,
	FOREIGN KEY ("ID") REFERENCES "Assignment"("ID")
) INHERITS ("Assignment");

DROP TABLE IF EXISTS FileType CASCADE;

CREATE TABLE FileType (
	"ID" SERIAL PRIMARY KEY,
	FileType VARCHAR(10) NOT NULL
);

DROP TABLE IF EXISTS AllowedTypesUpload CASCADE;

CREATE TABLE AllowedTypesUpload (
	AssignmentID INTEGER NOT NULL REFERENCES AssignmentFileUpload ("ID"),
	FileTypeID INTEGER NOT NULL REFERENCES FileType ("ID")
);

DROP TABLE IF EXISTS FileUploadSubmission CASCADE;

CREATE TABLE FileUploadSubmission (
	"ID" INT PRIMARY KEY,
	FileID INTEGER NOT NULL REFERENCES "File" ("ID"),
	FOREIGN KEY("ID") REFERENCES Submission("ID")
) INHERITS (Submission);

DROP TABLE IF EXISTS AssignmentText CASCADE;

CREATE TABLE AssignmentText (
	"ID" INT PRIMARY KEY,
	MaxTextLength INTEGER NOT NULL DEFAULT 500,
	FOREIGN KEY ("ID") REFERENCES "Assignment"("ID")
) INHERITS ("Assignment");

DROP TABLE IF EXISTS TextSubmission CASCADE;

CREATE TABLE TextSubmission (
	"ID" INT PRIMARY KEY,
	"Text" TEXT NOT NULL,
	FOREIGN KEY("ID") REFERENCES Submission("ID")
) INHERITS (Submission);

DROP TABLE IF EXISTS PageFile CASCADE;

CREATE TABLE PageFile (
	"ID" INT PRIMARY KEY,
	FileID INTEGER NOT NULL REFERENCES "File" ("ID"),
	FOREIGN KEY ("ID") REFERENCES SectionItem("ID")
) INHERITS (SectionItem);

DROP TABLE IF EXISTS "Link" CASCADE;

CREATE TABLE "Link" (
	"ID" INT PRIMARY KEY,
	URL VARCHAR(512) NOT NULL,
	FOREIGN KEY ("ID") REFERENCES SectionItem("ID")
) INHERITS (SectionItem);

DROP TABLE IF EXISTS StudentProgress CASCADE;

-- if not in this table, then not done
CREATE TABLE StudentProgress (
	"ID" SERIAL PRIMARY KEY,
	StudentID INTEGER NOT NULL REFERENCES "User" ("ID"),
	SectionItemID INTEGER NOT NULL REFERENCES SectionItem ("ID")
);

DROP TABLE IF EXISTS Email CASCADE;

CREATE TABLE Email (
	"ID" SERIAL PRIMARY KEY,
	CourseID INTEGER NULL REFERENCES Course ("ID"),
	SentBy INTEGER NOT NULL REFERENCES "User" ("ID"),
	SentAt TIMESTAMP NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
	Subject VARCHAR(100) NULL,
	Body TEXT NULL
);

DROP TABLE IF EXISTS EmailReceivers CASCADE;

CREATE TABLE EmailReceivers (
	"ID" SERIAL PRIMARY KEY,
	EmailID INTEGER NOT NULL REFERENCES Email ("ID"),
	ReceivedBy INTEGER NOT NULL REFERENCES "User" ("ID")
);

DROP TABLE IF EXISTS EmailFiles CASCADE;

CREATE TABLE EmailFiles (
	"ID" SERIAL PRIMARY KEY,
	EmailID INTEGER NOT NULL REFERENCES Email ("ID"),
	FileID INTEGER NOT NULL REFERENCES "File" ("ID")
);

DROP TABLE IF EXISTS Feedback CASCADE;

CREATE TABLE Feedback (
	"ID" SERIAL PRIMARY KEY,
	InstructorID INTEGER NOT NULL REFERENCES "User" ("ID"),
	SubmissionID INTEGER NOT NULL REFERENCES Submission ("ID"),
	"Text" TEXT NULL,
	Grade FLOAT NOT NULL CHECK (Grade >= 0 AND Grade <= 100),
	GivenAt TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS "Comment" CASCADE;

CREATE TABLE "Comment" (
	"ID" SERIAL PRIMARY KEY,
	SubmissionID INTEGER NOT NULL REFERENCES Submission ("ID"),
	SentBy INTEGER NOT NULL REFERENCES "User" ("ID"),
	SentAt TIMESTAMP NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
	"Text" TEXT NOT NULL
);
